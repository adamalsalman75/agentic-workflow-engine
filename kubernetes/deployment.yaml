# PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: "agentic_workflow"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: agentic-workflow-secrets
              key: database-password
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: postgres-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
# Agentic Workflow Engine Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agentic-workflow-engine
  labels:
    app: agentic-workflow-engine
spec:
  replicas: 1
  selector:
    matchLabels:
      app: agentic-workflow-engine
  template:
    metadata:
      labels:
        app: agentic-workflow-engine
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c', 'until pg_isready -h postgres -p 5432; do echo waiting for postgres; sleep 2; done;']
      containers:
      - name: agentic-workflow-engine
        image: gcr.io/adam-466814/agentic-workflow-engine:latest
        ports:
        - containerPort: 8080
        env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: agentic-workflow-secrets
              key: openai-api-key
        - name: DATABASE_URL
          value: "jdbc:postgresql://postgres:5432/agentic_workflow"
        - name: DATABASE_USERNAME
          value: "postgres"
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: agentic-workflow-secrets
              key: database-password
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: agentic-workflow-engine
spec:
  selector:
    app: agentic-workflow-engine
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: agentic-workflow-engine-ingress
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "agentic-workflow-ip"
    networking.gke.io/managed-certificates: "agentic-workflow-ssl-cert"
spec:
  rules:
  - host: agentic-workflow.alsalman.dev
    http:
      paths:
      - path: /*
        pathType: ImplementationSpecific
        backend:
          service:
            name: agentic-workflow-engine
            port:
              number: 80
---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: agentic-workflow-ssl-cert
spec:
  domains:
    - agentic-workflow.alsalman.dev